import pytest
import pytest_asyncio
from playwright.async_api import async_playwright
from playwright.sync_api import sync_playwright
import pyotp
import json
import os
import asyncio
import traceback
from datetime import datetime
from pages.login_page import LoginPage
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Import TestRail integration
from utils.testrail_integration import testrail, TestRailStatus
from utils.screenshot_helper import screenshot_helper

# ---------- PYTEST CONFIGURATION ---------- #
def pytest_addoption(parser):
    parser.addoption(
        "--headless", 
        action="store_true", 
        default=False, 
        help="Run tests in headless mode (without browser UI)"
    )

@pytest.fixture(scope="session")
def headless_mode(request):
    return request.config.getoption("--headless")

# ---------- ENV CONFIG ---------- #
def load_config():
    """Load configuration from environment variables"""
    return {
        "base_url": os.getenv("BASE_URL", "https://new.viewz.co"),
        "username": os.getenv("TEST_USERNAME", ""),
        "password": os.getenv("TEST_PASSWORD", ""),
        "otp_secret": os.getenv("TEST_TOTP_SECRET", ""),
        "api_base_url": os.getenv("API_BASE_URL", "https://new.viewz.co"),
        "jwt_token": os.getenv("JWT_TOKEN", "")
    }

@pytest.fixture(scope="session")
def env_config():
    return load_config()

# ---------- ASYNC PAGE FIXTURE ---------- #
@pytest_asyncio.fixture
async def page(env_config, headless_mode):
    async with async_playwright() as p:
        # Use headless_mode parameter, but keep slow_mo and args for non-headless
        launch_options = {
            "headless": headless_mode,
        }
        if not headless_mode:
            launch_options.update({
                "slow_mo": 200,
                "args": ["--start-maximized"]
            })
        
        browser = await p.chromium.launch(**launch_options)
        context = await browser.new_context(base_url=env_config["base_url"], viewport=None)
        page = await context.new_page()
        yield page
        await context.close()
        await browser.close()

# ---------- SYNC CONTEXT FIXTURE (optional) ---------- #
@pytest.fixture(scope="session")
def sync_browser_context():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context()
        yield context
        browser.close()

# ---------- LOGIN DATA FIXTURE ---------- #
@pytest.fixture
def login_data():
    """Load login data from environment variables"""
    return {
        "username": os.getenv("TEST_USERNAME", ""),
        "password": os.getenv("TEST_PASSWORD", "")
    }

# ---------- PERFORM LOGIN WITH OTP FIXTURE ---------- #
@pytest_asyncio.fixture
async def perform_login(page, login_data):
    login = LoginPage(page)
    await login.goto()
    await login.login(login_data["username"], login_data["password"])

    # ◊î◊ñ◊†◊™ OTP
    secret = os.getenv('TEST_TOTP_SECRET')
    if not secret:
        raise ValueError("TEST_TOTP_SECRET environment variable is required")
    otp = pyotp.TOTP(secret).now()

    await page.wait_for_selector("text=Two-Factor Authentication", timeout=5000)
    await page.get_by_role("textbox").fill(otp)
    await asyncio.sleep(1)
    #await page.get_by_role("button", name="Verify").click()
    await page.wait_for_selector("text=SuccessOTP verified successfully", timeout=5000)

    return page

# ---------- PERFORM LOGIN WITH ENTITY SELECTION FIXTURE ---------- #
@pytest_asyncio.fixture
async def perform_login_with_entity(page, login_data):
    """Enhanced login fixture that includes entity selection after login"""
    from pages.entity_selector_page import EntitySelectorPage
    
    login = LoginPage(page)
    await login.goto()
    await login.login(login_data["username"], login_data["password"])

    # ◊î◊ñ◊†◊™ OTP
    secret = "HA2ECLBIKYUEEI2GPUUSMN3XIMXFETRQ"  # ◊î◊ó◊ú◊£ ◊ê◊ù ◊¶◊®◊ô◊ö
    otp = pyotp.TOTP(secret).now()

    await page.wait_for_selector("text=Two-Factor Authentication", timeout=5000)
    await page.get_by_role("textbox").fill(otp)
    await asyncio.sleep(3)
    
    # Try to wait for various success indicators, don't fail if timeout
    try:
        await page.wait_for_selector("text=SuccessOTP verified successfully", timeout=5000)
    except:
        try:
            # Alternative success indicators
            await page.wait_for_selector("text=Success", timeout=2000)
        except:
            try:
                # Check if we're redirected (indicates success)
                await page.wait_for_url("**/home**", timeout=3000)
            except:
                # Continue anyway - some 2FA flows don't show success message
                await asyncio.sleep(2)

    # Entity Selection Step
    print("üè¢ Starting entity selection...")
    entity_selector = EntitySelectorPage(page)
    entity_selected = await entity_selector.select_entity("Viewz Demo INC")
    
    if entity_selected:
        print("‚úÖ Entity selection completed successfully")
    else:
        print("‚ö†Ô∏è Entity selection failed or not required")
    
    return page

# ---------- SCREENSHOT FIXTURE ---------- #
@pytest.fixture
def screenshot_on_failure(request):
    """Fixture to capture screenshots on test failure"""
    yield
    
    if request.node.rep_call.failed:
        # Get page from test fixtures
        page = None
        if hasattr(request, 'getfixturevalue'):
            try:
                page = request.getfixturevalue('page')
            except:
                try:
                    page = request.getfixturevalue('perform_login')
                except:
                    pass
        
        if page:
            test_name = request.node.name
            filename, info = screenshot_helper.capture_sync_screenshot(page, test_name)
            if filename:
                print(f"\nüì∏ Screenshot saved: {filename}")
            else:
                print(f"\n‚ö†Ô∏è Screenshot failed: {info}")

# ---------- TESTRAIL INTEGRATION HOOKS ---------- #
def pytest_configure(config):
    """Setup TestRail integration at the start of test session"""
    if testrail._is_enabled():
        print("\nüîó TestRail integration enabled")
        # Setup test run
        testrail.setup_test_run()

@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """Create test report and update TestRail with screenshots and detailed failure info"""
    outcome = yield
    report = outcome.get_result()
    
    # Store report in item for screenshot fixture
    setattr(item, f"rep_{call.when}", report)
    
    if call.when == 'call':
        # Get test case ID mapping - Updated with actual TestRail case IDs
        test_name = item.nodeid.split("::")[-1]
        print(f"\nüîç Processing test: {test_name}")
        
        case_mapping = {
        # ===== NEW COMPREHENSIVE SUITE MAPPINGS =====
        # Suite ID: 139
        # Total Cases: 26

        # API Tests
        'test_all_endpoints_reject_invalid_date_formats': 7944,  # C7944
        'test_create_journal_entry_invalid_date_format': 7939,  # C7939
        'test_create_journal_entry_valid_date_format': 7938,  # C7938
        'test_date_format_consistency_across_endpoints': 7945,  # C7945
        'test_date_format_validation_demo': 7946,  # C7946
        'test_get_accounting_uploaded_files_date_format': 7943,  # C7943
        'test_get_bank_transactions_data_date_format': 7941,  # C7941
        'test_get_bank_uploaded_files_date_format': 7940,  # C7940
        'test_get_entity_documents_date_format': 7942,  # C7942
        'test_get_journal_entries_invalid_date_format_request': 7937,  # C7937
        'test_get_journal_entries_valid_date_format_request': 7936,  # C7936

        # Login Tests
        'test_login': 7947,  # C7947
        'test_logout_after_2fa_login': 7961,  # C7961
        'test_scenario_1_valid_login': 7948,  # C7948
        'test_tabs_navigation_single_login': 7956,  # C7956

        # Navigation Tests
        'test_tab_navigation[text=BI Analysis-BIAnalysisPage]': 7954,  # C7954
        'test_tab_navigation[text=Connections-ConnectionPage]': 7955,  # C7955
        'test_tab_navigation[text=Home-HomePage]': 7950,  # C7950
        'test_tab_navigation[text=Ledger-LedgerPage]': 7953,  # C7953
        'test_tab_navigation[text=Reconciliation-ReconciliationPage]': 7952,  # C7952
        'test_tab_navigation[text=Vizion AI-VizionAIPage]': 7951,  # C7951

        # Logout Tests
        'test_logout_comprehensive_workflow': 7965,  # C7965
        'test_logout_direct_method': 7962,  # C7962
        'test_logout_keyboard_method': 7964,  # C7964
        'test_logout_via_menu': 7963,  # C7963
        'test_scenario_2_logout_user': 7949,  # C7949
        }
        
        case_id = case_mapping.get(test_name)
        
        # Get page object if available for screenshots
        page = None
        if hasattr(item, 'funcargs'):
            # Try to get page from different fixture names
            page = item.funcargs.get('page') or item.funcargs.get('perform_login')
        
        # Always capture screenshot on failure, regardless of TestRail mapping
        if not report.passed and page:
            print(f"üì∏ Attempting to capture screenshot for failed test: {test_name}")
            try:
                filename, info = screenshot_helper.capture_sync_screenshot(page, test_name)
                if filename:
                    print(f"‚úÖ Screenshot captured: {filename}")
                else:
                    print(f"‚ùå Screenshot failed: {info}")
            except Exception as e:
                print(f"‚ùå Screenshot exception: {str(e)}")
        
        # Only update TestRail if test is mapped
        if case_id and testrail._is_enabled():
            # Determine test status and create detailed comment
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            if report.passed:
                status = TestRailStatus.PASSED
                comment = f"‚úÖ **Test PASSED** - {timestamp}\n\n"
                comment += f"**Test**: {test_name}\n"
                comment += f"**Duration**: {report.duration:.2f}s\n"
                comment += "**Result**: All assertions passed successfully"
                
            else:
                status = TestRailStatus.FAILED
                comment = f"‚ùå **Test FAILED** - {timestamp}\n\n"
                comment += f"**Test**: {test_name}\n"
                comment += f"**Duration**: {report.duration:.2f}s\n\n"
                
                # Add detailed failure information
                if report.longrepr:
                    failure_info = str(report.longrepr)
                    # Extract the actual error message
                    if "AssertionError:" in failure_info:
                        error_lines = failure_info.split('\n')
                        for line in error_lines:
                            if "AssertionError:" in line:
                                comment += f"**Error**: {line.strip()}\n\n"
                                break
                    elif "TimeoutError:" in failure_info:
                        error_lines = failure_info.split('\n')
                        for line in error_lines:
                            if "TimeoutError:" in line:
                                comment += f"**Timeout Error**: {line.strip()}\n\n"
                                break
                    else:
                        # Get the last few lines which usually contain the error
                        error_lines = failure_info.split('\n')[-8:]
                        comment += "**Error Details**:\n```\n"
                        comment += '\n'.join([line for line in error_lines if line.strip()])
                        comment += "\n```\n\n"
                
                # Add page context information
                if page:
                    try:
                        context = screenshot_helper.get_page_context(page)
                        comment += f"**Current URL**: {context.get('url', 'Unknown')}\n"
                        comment += f"**Page Title**: {context.get('title', 'Unknown')}\n\n"
                        
                        # Try to capture screenshot
                        filename, info = screenshot_helper.capture_sync_screenshot(page, test_name)
                        if filename:
                            comment += f"üì∏ **Screenshot**: {filename}\n"
                            comment += f"**Screenshot Location**: screenshots/{filename}\n\n"
                        else:
                            comment += f"‚ö†Ô∏è **Screenshot Error**: {info}\n\n"
                    except Exception as e:
                        comment += f"‚ö†Ô∏è **Context Error**: Could not capture page context - {str(e)}\n\n"
            
            # Calculate elapsed time
            elapsed = f"{report.duration:.2f}s" if hasattr(report, 'duration') else None
            
            # Update TestRail
            result = testrail.update_test_result(case_id, status, comment, elapsed)
            screenshot_msg = "with screenshot" if status == TestRailStatus.FAILED and page else ""
            
            # Only show success message if TestRail update actually worked
            if result:
                print(f"üìä Updated TestRail case {case_id}: {status} {screenshot_msg}")
            else:
                print(f"‚ùå Failed to update TestRail case {case_id}: {status} {screenshot_msg}")
        else:
            print(f"‚ÑπÔ∏è Test '{test_name}' not mapped to TestRail or TestRail disabled")

def pytest_sessionfinish(session, exitstatus):
    """Finalize TestRail integration at the end of test session"""
    if testrail._is_enabled():
        # Add a small delay to ensure all test results are processed
        import time
        time.sleep(2)
        testrail.finalize_test_run()
        print("üèÅ TestRail test run completed")
